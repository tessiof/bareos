# BAREOS - Backup Archiving REcovery Open Sourced
#
# Copyright (C) 2013-2014 Bareos GmbH & Co. KG
#
# This program is Free Software; you can redistribute it and/or
# modify it under the terms of version three of the GNU Affero General Public
# License as published by the Free Software Foundation, which is
# listed in the file LICENSE.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301, USA.
#
# Author: Marco van Wieringen
#
from bareosdir import *
from bareos_dir_consts import *


def load_bareos_plugin(plugindef):
    DebugMessage(
        100, "load_bareos_plugin called with param: " + plugindef + "\n"
    )
    events = []
    events.append(bDirEventType["bDirEventJobStart"])
    events.append(bDirEventType["bDirEventJobEnd"])
    events.append(bDirEventType["bDirEventJobInit"])
    events.append(bDirEventType["bDirEventJobRun"])
    RegisterEvents(events)
    return bRCs["bRC_OK"]


def parse_plugin_definition(plugindef):
    DebugMessage(
        100, "parse_plugin_definition called with param: " + plugindef + "\n"
    )
    plugin_options = plugindef.split(":")
    for current_option in plugin_options:
        key, sep, val = current_option.partition("=")
        if val == "":
            continue

        elif key == "instance":
            continue

        elif key == "module_path":
            continue

        elif key == "module_name":
            continue

        else:
            DebugMessage(
                100,
                "parse_plugin_definition unknown option "
                + key
                + " with value "
                + val
                + "\n",
            )
            return bRCs["bRC_Error"]

    return bRCs["bRC_OK"]


def handle_plugin_event(event):
    if event == bDirEventType["bDirEventJobStart"]:
        DebugMessage(100, "bDirEventJobStart event triggered\n")
        jobname = GetValue(brDirVariable["bDirVarJobName"])
        DebugMessage(100, "Job " + jobname + " starting\n")

    elif event == bDirEventType["bDirEventJobEnd"]:
        DebugMessage(100, "bDirEventJobEnd event triggered\n")
        jobname = GetValue(brDirVariable["bDirVarJobName"])
        DebugMessage(100, "Job " + jobname + " stopped\n")

    elif event == bDirEventType["bDirEventJobInit"]:
        DebugMessage(100, "bDirEventJobInit event triggered\n")

    elif event == bDirEventType["bDirEventJobRun"]:
        DebugMessage(100, "bDirEventJobRun event triggered\n")

    return bRCs["bRC_OK"]
